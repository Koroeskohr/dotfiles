
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="robbyrussell"
# ZSH_THEME="purify"

fpath=(~/.config/completions $fpath)


command_exists () {
	command -v "$1" >/dev/null
}

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="dd.mm.yyyy"

source $ZSH/oh-my-zsh.sh

# User configuration

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
export EDITOR="nvim"

# Every command longer than n seconds will display exec time
export REPORTTIME=5

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# zsh plugins
plugins=(git common-aliases sbt wd docker docker-compose microk8s zsh-syntax-highlighting)

# Env vars

{{- if .isWork }}
export WORK_DIR="$HOME/PreciseArchery"
export PERSONAL_DIR="$HOME/DubiousFoolery"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$UNITEX_HOME/Src/C++/bin/"
{{- end }}

export PATH="$HOME/.yarn/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.bloop:$PATH"
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
export PATH="$PATH:$HOME/.local/share/coursier/bin"
export PATH="$PATH:/usr/local/go/bin"
export PATH="$PATH:/opt/nvim-linux64/bin"
export PATH="$PATH:$HOME/.pulumi/bin"

export MYZSHRC="$HOME/.zshrc"

# === export JAVA_HOME="xx"; export PATH="newjvm:PATH"
eval "$(cs java --jvm temurin:1.17 --env)"

source ~/.functions
source ~/.*.inc.sh

# fzf (fuzzy finding)
export FZF_DEFAULT_COMMAND='ag --nocolor -g ""'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_DEFAULT_OPTS="--color fg:242,bg:236,hl:65,fg+:15,bg+:239,hl+:108 --color info:108,prompt:109,spinner:108,pointer:168,marker:168"

export XDG_DATA_DIRS="$XDG_DATA_DIRS:/var/lib/flatpak/exports/share:$HOME/.local/share/flatpak/exports/share"

export HISTTIMEFORMAT="%d/%m/%y %T "

################ Start services and tools

# Ruby configuration
export PATH="$HOME/.rbenv/bin:$PATH"
export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"
command_exists rbenv && eval "$(rbenv init -)"

# NPM/nvm configuration
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Python env through pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
# eval "$(pyenv virtualenv-init -)"

if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
  source /etc/profile.d/vte.sh
fi

# Starts z (smart autocomplete)
. /etc/profile.d/z.sh

# Starts fzf (fuzzy-finding)
if [ -e /usr/local/opt/fzf/shell/completion.zsh ]; then
  source /usr/local/opt/fzf/shell/key-bindings.zsh
  source /usr/local/opt/fzf/shell/completion.zsh
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

DUNK_AC_ZSH_SETUP_PATH=/home/victor/.cache/dunk/autocomplete/zsh_setup && test -f $DUNK_AC_ZSH_SETUP_PATH && source $DUNK_AC_ZSH_SETUP_PATH;

command_exists aws && complete -C '/usr/local/bin/aws_completer' aws

# Kubernetes kubectl completion
command_exists kubectl && source <(kubectl completion zsh)

function pod-name () {
  kubectl get pods | grep $1 | awk '{ print $1 }'
}

function pod-name-running () {
  kubectl get pods | grep $1 | grep Running | awk '{ print $1 }'
}

function pod-logs() {
  kubectl logs $2 $(pod-name "$1")
}

function pod-kill () {
  kubectl delete pod $(pod-name "$1")
}

function pod-sh () {
  kubectl exec -it $(pod-name "$1") /bin/sh
}

alias k='kubectl'
alias kp='kubectl get pods'
alias kbn='kubectl --context k8s.staging-implio.com -n benchmark '
alias stern='kubectl stern'

# autocomplete for the k8s tail tool `stern`
source <(kubectl stern --completion=zsh)

################ Aliases and helpers
alias n="nvim"
alias open="open_command"

alias ll='ls -lAht'

alias g="git"
alias gco="git checkout"
alias gst='git status'
alias gcim='git commit -m'
alias gciam='git commit -am'
alias grc='git rebase --continue'
alias xa="exa -abghl --git --color=automatic"

if [[ "$OSTYPE" == "darwin"* ]]; then
    alias code="/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code"
else
    alias code="/usr/bin/code"
fi

alias did="nvim +'normal Go' +'r!date' ~/.did/did.txt"

{{- if .isWork }}
function ,didcse {
  local notes_file="$HOME/Private/cse/notes.md"
  function __did {
    nvim +'normal Go' +'r!echo "\#\# $(date -I)"' $notes_file
  }

  if [ -e $notes_file ]
  then
    __did
    echo "locking the vault back!"
    ecryptfs-umount-private
  else
    echo 'Decrypt folder first'
    ecryptfs-mount-private
    if [ $? -eq 0 ]
    then
      __did
      echo "locking the vault back!"
      ecryptfs-umount-private
      echo "locking the vault back!"
      ecryptfs-umount-private
      echo "locking the vault back!"
      ecryptfs-umount-private
      echo "locking the vault back!"
      ecryptfs-umount-private
    else
      echo 'error unlocking vault'
    fi
  fi
  unset -f __did
}

alias update-devenvctl="update-devenvctl linux /home/victor/bin/devenvctl"
alias aws_update_tmp_profile="AWS_PROFILE=dsr-main /home/victor/PreciseArchery/universal/common/aws/update_tmp_aws_cli_profile/aws_update_tmp_aws_cli_profile.py /home/victor/.besedo_aws_auth.json"
{{- end }}

function monday_morning {
  sudo apt update -y
  sudo apt upgrade -y
  sudo snap refresh
}

function killport {
  kill -3 $(lsof -i:$1 | grep TCP | awk '{print $2;}')
}

function killgrep {
  local pids=$(ps aux | grep $1 | grep -v 'grep --color' | awk '{print $2}')
  while read -r line; do
    kill -9 "$line"
  done <<< "$pids"
}

function swap() {
  mv $1 $1.swp
  mv $2 $1
  mv $1.swp $2
}

function locof() {
  z -l $1 | awk "{print $2}" | head -n1
}

function nufeature {
  exists=$(git show-ref feature/$1)
  if [ -n "$exists" ]; then
      echo "Branch $1 already exists!"
      return 1
  fi

  if [[ $(git status -uno --porcelain) ]]; then
    echo "Commit or stash changes first !"
    return 1
  fi

  git fetch origin
  git checkout develop

  if [[ $(git status -uno --porcelain) ]]; then
    echo "develop has changes, merge/rebase onto dev"
    return 1
  fi

  git pull origin develop
  git checkout -b feature/$1
}

function endfeature {
  if [ -z $(git status -uno --porcelain) ]; then
    branch=$(git rev-parse --abbrev-ref HEAD)
    if [ $(echo $branch | cut -c 1-8) -ne "feature/" ]
    then
      echo "Current branch ($branch) is not a feature"
      exit 1
    fi
    git push origin $branch
    sleep 1
    git checkout develop
    git pull origin develop
    directory=${PWD##*/}
  else
    echo "branch is not clean";
  fi
}

{{- if .isWork }}
function gcimp {
  local message="$1"
  local branch=$(git rev-parse --abbrev-ref HEAD)
  local ticket=$(echo $branch | grep -Po '((IMP|imp)-[0-9]+)(?=.*)')

  if [ -z $ticket ]
  then
    echo "Branch $branch doesnt match 'IMP-xxxx'"
    return 1
  fi

  git commit -m "[$ticket] $message"
}

function gcimhotfix {
  local message="$1"

  git commit -m "[hotfix] $message"
}
{{- end }}

function init_git_hidden_folder {
  local git_root=$(git rev-parse --show-toplevel)

  if [ -z $git_root ]
  then
    echo "No git repository found for the current directory"
    exit 1
  fi

  mkdir -p "$git_root/local"
  echo "/local" >> $git_root/.git/info/exclude
}

function mdshow () {
  pandoc "$1" | lynx -stdin
}

function kctx () {
  local c=$(kubectl config current-context)

  if [[ "$c" == *"staging"* ]]; then
    echo "k:%{$terminfo[bold]%F{yellow}%}% $c%{$reset_color%}"
  else
    echo "k:$c"
  fi
}

export PS1='%{$terminfo[bold]$FG[075]%}%~%{$reset_color%} $(kctx) $(git_prompt_info)%{$reset_color%}
%{$FG[206]%}‚ùØ%{$reset_color%} '

